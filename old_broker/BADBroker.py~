import tornado.ioloop
import tornado.web
import tornado.httpclient

import socket
import hashlib
import json
import sys
from datetime import datetime
from asterixapi import *


class BADObject:
    def __init__(self, objectId):
        self.objectId = objectId
    
    def load(self):
        cmd_stmt = "for $t in dataset " + str(self.__class__.__name__) + "Dataset "
        cmd_stmt = cmd_stmt + " where $t.objectId = " + str(self.objectId) + " return $t"
        print cmd_stmt
        
        
    def save(self):        
        cmd_stmt = "upsert into dataset " + self.__class__.__name__ + "Dataset"
        cmd_stmt = cmd_stmt + "("
        cmd_stmt = cmd_stmt + json.dumps(self.__dict__)
        cmd_stmt = cmd_stmt + ")"
        print cmd_stmt

class User(BADObject):
    def __init__(self, objectId):
        BADObject.__init__(self, objectId)
    
    def __init__(self, objectId, userid, username, password, email):
        BADObject.__init__(self, objectId)
        self.userid = userid
        self.username = username
        self.password = password        
        self.email = email
     

class Subscription(BADObject):
    def __init__(self, objectId):
        BADObject.__init__(self, objectId)
    
    def __init__(self, objectId, subid, userid, channelName, timestamp, resultsDataset, maxrecords):  
        BADObject.__init__(self, objectId)
        self.subid = subid
        self.userid = userid
        self.channelName = channelName
        self.timestamp = timestamp
        self.resultsDataset = resultsDataset
        self.maxrecords = maxrecords

                            
class BADBroker:    
    def __init__(self, asterix_backend):
        self.asterix_backend = asterix_backend
        self.brokerName = str(hashlib.sha224(self._myNetAddress() + str(datetime.now())).hexdigest())        
        self.users = {}        
        self.subscriptions = {}
        
        self.callbacks = {}
        self.accesstokens = {}

    def _myNetAddress(self):
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 0))  
        mylocaladdr = str(s.getsockname()[0])                
        return mylocaladdr
        
    def register(self, username, email, password):
        if username in self.users:
            return {"status" : "failed", "error" : "User is already registered with the same name!", 
                    'userid': self.users[username].userid}
        else:
            userid = str(hashlib.sha224(username).hexdigest())
            user = User(userid, userid, username, password, email)
            user.save()
            self.users[username] = user
            
            return {"status": "success", "userid" : userid}          
    
    def login(self, username, password):
        if username in self.users:
            if password == self.users[username].password:
                accesstoken = str(hashlib.sha224(username + str(datetime.now())).hexdigest())
                userid = self.users[username].userid 
                self.accesstokens[userid] = accesstoken                               
                return {"status" : "success", "userid" : userid, "accesstoken" : accesstoken}
        
        return {"status" : "failed", "error" : "Username or password does not match!"}            
            
    
    def logoff(self, userid):
        if userid in self.accesstokens:
            for sub in self.subscriptions:
                if sub.userid == userid:
                    if subid in self.callbacks:
                        del self.callbacks[subid] 
            del self.accesstokens[userid]
        
        return {'status' : 'success'}             
                    
    def subscribe(self, userid, accesstoken, channelName, parameters):    
        check = self._checkAccess(userid, accesstoken)
        if check["status"] == "failed":
            return check
        
        result = self.getChannelInfo(channelName)                
        
        if result['status'] == 'failed':
            return result
        
        channels = result['channels']
        
        print channels
        
        if len(channels) == 0:
            return {'status' : 'failed', 'error' : 'No channel exists named %s!' %(channelName)}
            
        channel = channels[0]
        
        print channel['Function']
        print channel['ChannelName']
        print channel['ResultsDatasetName']
        
        function_name = channel['Function']
        arity = int(function_name.split("@")[1])
        results_dataset_name = channel['ResultsDatasetName']
        
        if arity != len(parameters):
            return { 'status' : 'failed', 
                     'error' : 'Channel routine take %d arguments, given %d' %(arity, len(parameters)) }
        
                
        parameter_list = ""
        if parameters is not None:
            for value in parameters:         
                if len(parameter_list) != 0:
                    parameter_list = parameter_list + ", "                
                           
                if isinstance(value, str):
                    parameter_list = parameter_list + "\"" + value + "\""
                else:
                    parameter_list = parameter_list + str(value)
            
        
        aql_stmt = "subscribe to " + channelName + "(" + parameter_list + ") on " + self.brokerName
        print aql_stmt
        
        '''
        status_code, response = self.asterix_backend.executeQuery(aql_stmt)
        
        if status_code == 200:
            print 'OK', response
        else:
            return {"status" : "fail", 'error' : response }        
        '''
    
        subid = '121efer242fsabc'
        timestamp = 121289895
        maxrecords = 10
        resultsDataset = results_dataset_name
        
        
        subscription = Subscription(subid, subid, userid, channelName, timestamp, 
                                        resultsDataset, maxrecords)
        subscription.save()
        
        self.subscriptions[subid] = subscription                                
        self.callbacks[subid] = None
                                     
        return {'status': 'success', 'subid' : subid, 'timestamp' : timestamp}
        
        
    def getresults(self, requestHandler, userid, accesstoken, subid, timestamp, maxrecords):
        check = self._checkAccess(userid, accesstoken)
        if check["status"] == "failed":
            return check
        
        if subid not in self.subscriptions:                        
            return {'status' : 'success', 'error' : 'No such subscription'}    
        elif self.subscriptions[subid].userid != userid:
            return {'status' : 'success', 'error' : 'Invalid subscription for user %s' %(userid)} 
        
        
        # Get results
        results = self.getResultsFromAsterix(subid, timestamp, maxrecords)
        
        return {'status' : 'success', 'subid': subid, 'results' : results}
        
        """
        if len(results) > 0:            
            return {"status" : "success", 'subid': subid, 'results' : results} 
        else:
            if requestHandler is not None:
                print 'Registering callback for', subid
                self.callbacks[subid] = requestHandler.onNewResults
                return {'status' : 'wait', 'subid': subid}
            else:
                return {'status' : 'success', 'subid': subid, 'results' : results}    

        """    
    def getResultsFromAsterix(self, subid, timestamp, maxrecords):
        #results = [dict(key1 = "value2", key2 = "value2"), dict(key1=12, key2 = 234)]            
        results = []
        return results 
    
    
    def listchannels(self, userid, accesstoken):
        check = self._checkAccess(userid, accesstoken)
        if check["status"] == "failed":
            return check
        
        aql_stmt = "for $channel in dataset Metadata.Channel return $channel"
        status, response = self.asterix_backend.executeQuery(aql_stmt)
        
        if status == 200:
            response = response.replace('\n', '')
            print response   
            
            channels = json.loads(response)
            return {"status" : "success", "channels" : channels}    
        else:
            return {"status" : "failed", "error" : response}
    
    
    def getChannelInfo(self, channelName):                
        aql_stmt = "for $t in dataset Metadata.Channel "
        aql_stmt = aql_stmt + "where $t.ChannelName = \"" + channelName + "\" "
        aql_stmt = aql_stmt + "return $t"
        
        print aql_stmt
        
        status, response = self.asterix_backend.executeQuery(aql_stmt)
        
        if status == 200:
            response = response.replace('\n', '')
            print response               
            channels = json.loads(response)
            return {'status' : 'success', 'channels' : channels}
        else:
            print {'status' : 'failed', 'error': response}
    
    
    def notifyBroker(self, brokerName, channelName, subscriptions):
        #if brokerName != self.brokerName:
        #    return {'status': 'failed', 'error' : 'Not the intended broker %s' %(brokerName)}
        
        result = self.getChannelInfo(channelName)                        
        if result['status'] == 'failed':
            return result
        
        channels = result['channels']
        
        if len(channels) == 0:
            return {'status' : 'failed', 'error' : 'No channel exists named %s!' %(channelName)}
            
        channel = channels[0]
        
        print 'Notification received for', [sub['subid'] for sub in subscriptions]
        
        for sub in subscriptions:
            subid = sub['subid']
            timestamp = sub['timestamp']
            recordcount = sub['recordcount']            
            
            self.notifyUser(channel, subid, timestamp, recordcount)
            
            """
            if subid in self.callbacks:
                callback = self.callbacks[subid]
                if callback is not None:
                    print 'Callbacks to', subid
                    results = self.getResultsFromAsterix(subid, timestamp, recordcount)
                    response = {
                        'status': 'success',
                        'subid': subid,
                        'results': results
                        }
                    
                    tornado.ioloop.IOLoop.current().add_callback(callback, response)
                    del self.callbacks[subid]                    
            """
        return {'status' : 'success'}
                       
    
    def _checkAccess(self, userid, accesstoken):
        if userid in self.accesstokens:
            if accesstoken == self.accesstokens[userid]:
                return {"status" : "success"}
            else:
                return {"status" : "failed", "error" : "Invalid access token"}    
        else: 
            return {"status": "failed", "error": "User not authenticated"}        
        

def test_broker():
    asterix_backend = AsterixQueryManager("http://cacofonix-4.ics.uci.edu:19002");
    asterix_backend.setDataverseName("emergencyTest")
    broker = BADBroker(asterix_backend)
    
    print broker.register("sarwar", "ysar@gm.com", "pass")
    
    result =  broker.login("sarwar", "pass")
    userid = result["userid"]
    accesstoken = result["accesstoken"]

    #print broker.listchannels(userid, accesstoken)    
    #print broker.getChannelInfo(userid, accesstoken, "EmergencyMessagesChannel")
    result = broker.subscribe(userid, accesstoken, "EmergencyMessagesChannel", [12])
    
    subid = result['subid']
    print broker.getresults(userid, accesstoken, subid, 12235, 100)

    print broker.listchannels(userid, accesstoken)
    
    print broker.notifyBroker(broker.brokerName, 
                "EmergencyMessagesChannel", [{'subid': subid, 'timestamp' : 121, 'recordcount' : 12}])
    
    #test = {'A' : 12, 'B' : [{"X": 12}, {"Y": 23}, {"Z": 34}]}
    #print test['B'][0]



if __name__ == "__main__":
    test_broker()

