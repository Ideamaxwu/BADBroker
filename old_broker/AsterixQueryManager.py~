import requests

class AsterixQueryManager():
    def __init__(self, baseURL, servicePoint):
        self.asterixBaseURL = baseURL
        self.asterixServicePoint = servicePoint
        self.queryString = ""
        self.dataverseName = None
    
    def setDataverseName(self, dataverseName):
        self.dataverseName = dataverseName
                            
    def forClause(self, clause):
        if self.dataverseName is None:
            raise Exception('No dataverse name set')
            
        if len(self.queryString) > 0:
            self.queryString = self.queryString + " for  " + clause    
        else:
            self.queryString = "for  " + clause
        return self
        
    def letClause(self, clause):
        if self.dataverseName is None:
            raise Exception('No dataverse name set')

        if len(self.queryString) == 0:
            raise Exception("LET cann't start a query")
        else:
            self.queryString = self.queryString + " let  " + clause
        return self
     
    def whereClause(self, clause):
        if self.dataverseName is None:
            raise Exception('No dataverse name set')

        if len(self.queryString) == 0:
            raise Exception("WHERE cann't start a query")
        else:
            self.queryString = self.queryString + " where  " + clause
            
        return self
    
    
    def orderByClause(self, clause):
        if self.dataverseName is None:
            raise Exception('No dataverse name set')

        if len(self.queryString) == 0:
            raise Exception("ORDER BY cann't start a query")
        else:
            self.queryString = self.queryString + " order by  " + clause
        
        return self
     
    def groupByClause(self, clause):
        if self.dataverseName is None:
            raise Exception('No dataverse name set')

        if len(self.queryString) == 0:
            raise Exception("GROUP BY cann't start a query")
        else:
            self.queryString = self.queryString + " group by " + clause
        
        return self
    
     
    def returnClause(self, clause):
        if self.dataverseName is None:
            raise Exception('No dataverse name set')

        if len(self.queryString) == 0:
            raise Exception("GROUP BY cann't start a query")
        else:
            self.queryString = self.queryString + " return " + clause
        
        return self
     
    
    def executeQuery(self):
        if self.asterixBaseURL is None or self.asterixServicePoint is None:
            raise Exception('Query Manager is setup well!!!')
        else:            
            if len(self.queryString) > 0:
                request_url = asterixBaseURL + "/" + asterixServicePoint + "/"    
                query = "use dataverse " + self.dataverseName + " " + self.queryString + ";"    
                print 'Executing... ' + query
                                
                response = requests.get(request_url, params = {"query" : query})
                
                #response = requests.get(request_url, params = {"query" : query, "mode": "asynchronous"})
                #response = requests.get(request_url +"/result", params = {"handle" : "\"handle\":\"[59, 0]\""})

                print response.url
                print response.status_code
                print response.text
                
                return response.status_code, response.text    
            
