import tornado.ioloop
import tornado.web
import tornado.httpclient

import socket
import hashlib
import json
import sys
from datetime import datetime
from BADBroker import BADBroker 
from asterixapi import AsterixQueryManager

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.write("This is BAD broker!!")
			
class RegistrationHandler(tornado.web.RequestHandler):
    def initialize(self, broker):
        self.broker = broker
        
    def post(self):        
        print self.request.body        
        post_data = json.loads(self.request.body)
        
        username = post_data['username']
        email = post_data['email']
        password = post_data['password']                
        
        response = self.broker.register(username, email, password)
        
        self.write(json.dumps(response))
        self.flush()
        self.finish()
       

class LoginHandler (tornado.web.RequestHandler):
    def initialize(self, broker):
        self.broker = broker
        
    def post(self):
        print self.request.body        
        post_data = json.loads(self.request.body)
        
        username = post_data['username']
        password = post_data['password']                
        
        response = self.broker.login(username, password)
        
        self.write(json.dumps(response))
        self.flush()
        self.finish()

class SubscriptionHandler(tornado.web.RequestHandler):
    def initialize(self, broker):
        self.broker = broker
    
    def post(self):
        print self.request.body        
        post_data = json.loads(self.request.body)
        
        userid = post_data['userid']
        accesstoken = post_data['accesstoken']        
        channelName = post_data['channelName']
        parameters = post_data['parameters']                
        
        response = self.broker.subscribe(userid, accesstoken, channelName, parameters)
        
        self.write(json.dumps(response))
        self.flush()
        self.finish()                


class GetResultsHandler(tornado.web.RequestHandler):
    def initialize(self, broker):
        self.broker = broker
    
    def get(self):
        print self.request.body
        
    """  
    @tornado.web.asynchronous    
    def post(self):
        print self.request.body        
        post_data = json.loads(self.request.body)
        
        userid = post_data['userid']
        accesstoken = post_data['accesstoken']
        subid = post_data['subid']                
        timestamp = post_data['timestamp']
        maxrecords = post_data['maxrecords']
        
        response = self.broker.getresults(self, userid, accesstoken, subid, timestamp, maxrecords)
        
        if response['status'] != 'wait':
            self.onNewResults(response)
    """
            
    def post(self):
        print self.request.body        
        post_data = json.loads(self.request.body)
        
        userid = post_data['userid']
        accesstoken = post_data['accesstoken']
        subid = post_data['subid']                
        timestamp = post_data['timestamp']
        maxrecords = post_data['maxrecords']
        
        response = self.broker.getresults(self, userid, accesstoken, subid, timestamp, maxrecords)
        
        print json.dumps(response)
        self.write(json.dumps(response))
        self.flush()
        self.finish()    
  
    def onNewResults(self, response):
        print json.dumps(response)
        self.write(json.dumps(response))
        self.flush()
        self.finish()    
  

class NotifyBrokerHandler(tornado.web.RequestHandler):
    def initialize(self, broker):
        self.broker = broker
    
    def get(self):
        print self.request.body
    
    def post(self):
        print 'Broker received notifybroker'
        print self.request.body
                
        post_data = json.loads(self.request.body)
        print post_data
        
        brokerName = post_data['brokerName']
        channelName = post_data['channelName']
        subscriptions = post_data['subscriptions']
        
        response = self.broker.notifyBroker(brokerName, channelName, subscriptions)
        
        self.write(json.dumps(response))
        self.flush()
        self.finish()                
        
def start_server():
    asterix_backend = AsterixQueryManager("http://cacofonix-4.ics.uci.edu:19002");
    asterix_backend.setDataverseName("emergencyTest")
    broker = BADBroker(asterix_backend)       				

            				
    application = tornado.web.Application([
        (r"/", MainHandler),
        (r"/register", RegistrationHandler, dict(broker = broker)), 
        (r"/login", LoginHandler, dict(broker = broker)), 
        (r"/subscribe", SubscriptionHandler, dict(broker = broker)),
        (r"/getresults", GetResultsHandler, dict(broker = broker)), 
        (r"/notifybroker", NotifyBrokerHandler, dict(broker = broker)) 
    ])
    
    application.listen(8989)
    tornado.ioloop.IOLoop.current().start()
    
    
if __name__ == "__main__":
    start_server()
    

