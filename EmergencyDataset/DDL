drop dataverse channels if exists;
create dataverse channels;
use dataverse channels;

create type UserLocation as closed {
	recordId: uuid,
	location: point,
	user-id: string,
	timeoffset: float,
	timestamp: datetime
}

create type EmergencyShelter as closed {
	name: string,
	location: point
}

create type EmergencyReport as closed {
	reportId: uuid,
	severity: int,
	impactZone: circle,
	timeoffset: float,
	timestamp: datetime,
	duration: float,
	message: string,
	emergencyType: string
}

create dataset UserLocations(UserLocation)
primary key recordId autogenerated;

create dataset EmergencyShelters(EmergencyShelter)
primary key name;

create dataset EmergencyReports(EmergencyReport)
primary key reportId autogenerated;

load dataset UserLocations using localfs (("path"="asterix_nc1:///home/msarwaru/Dropbox/BAD/code/EmergencyDatasetUserLocations.adm"),("format"="adm"));

load dataset EmergencyShelters using localfs(("path"="asterix_nc1:///home/msarwaru/Dropbox/BAD/code/EmergencyDatasetEmergencyShelters.adm"),("format"="adm"));

load dataset EmergencyReports using localfs(("path"="asterix_nc1:///home/msarwaru/Dropbox/BAD/code/EmergencyDatasetEmergencyReports.adm"),("format"="adm"));


for $report in dataset EmergencyShelters
for $location in dataset UserLocations
let $circle := create-circle($report.location,5.0)
where spatial-intersect($circle, $location.location)
return {
	"user at":$location.location,
	"shelter at":$report.location
}
