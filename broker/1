drop dataverse channels if exists;
create dataverse channels;
use dataverse channels;

create type UserType as closed {
    recordId: string,
    userId: string,
    userName: string,
    password: string,
    email: string,
    platform: string,
    gcmRegistrationId: string
}

create dataset UserDataset (UserType)
primary key recordId;

create type UserSubscriptionType as closed {
    recordId: string,
    userSubscriptionId: string,
    channelSubscriptionId: string,
    userId: string,
    channelName: string,
    timestamp: string,
    latestDeliveredResultDeliveryTime: string,
    resultsDataset: string
}

create dataset UserSubscriptionDataset(UserSubscriptionType)
primary key recordId;

create type ChannelSubscriptionType as closed{
    recordId: string,
    channelName:string,
    parameters: string,
    channelSubscriptionId: string,
    latestResultDeliveryTime: string
}

create dataset ChannelSubscriptionDataset(ChannelSubscriptionType)
primary key recordId;

create broker brokerF at "http://localhost:8989/notifybroker";

create type TweetMessageTypeuuid as closed {
	tweetid: uuid,
	message-text: string
}

create dataset TweetMessageuuids(TweetMessageTypeuuid)
primary key tweetid autogenerated;

create function NearbyTweetsContainingText($text) {
  for $tweet in dataset TweetMessageuuids
	where contains($tweet.message-text,$text)
	return {"timestamp": current-datetime(), "message" : $tweet.message-text}
};

create repetitive channel nearbyTweetChannel using NearbyTweetsContainingText@1 period duration("PT20S");

insert into dataset TweetMessageuuids(
[{"message-text":"Live man"},
{"message-text":"Dead man"},
{"message-text":"Walking man"},
{"message-text":"Good man"}]
);

